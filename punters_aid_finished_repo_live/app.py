
import os, json, time
from datetime import date, timedelta, datetime
import pandas as pd, numpy as np, streamlit as st

st.set_page_config(page_title="Punters AId ‚Äî AU Greyhound AI", page_icon="üêï", layout="centered")

st.markdown("""
<style>
:root { --gold:#d4af37; --gold2:#f2e6b0; --black:#000; --bg2:#0b0b0b; }
html, body, [data-testid="stAppViewContainer"] { background: var(--black); color: var(--gold2); }
h1,h2,h3,h4 { color: var(--gold); }
[data-testid="stSidebar"] { background: var(--bg2); }
.stButton > button, .stDownloadButton > button { border:1px solid var(--gold); background: linear-gradient(180deg,#f7e7a6,#d4af37); color:#000; border-radius:10px; }
a { color: var(--gold2); }
.splash-wrap { display:flex; flex-direction:column; gap:18px; align-items:center; justify-content:center; height:68vh; }
.splash-logo { max-width: 520px; width: 80%; }
.fade-out { animation: fadeout 0.6s ease forwards; }
@keyframes fadeout { from{opacity:1} to{opacity:0} }
.footer { position: fixed; bottom: 0; left: 0; right: 0; background: rgba(0,0,0,0.9); color: var(--gold); padding: 10px 16px; font-size: 14px; text-align: center; border-top: 1px solid var(--gold); z-index: 9999; }
</style>
""", unsafe_allow_html=True)

st.markdown('<div class="footer">‚ö†Ô∏è Punters AId ¬© 2025 ‚Äî Predictions are estimates only. Gamble responsibly.</div>', unsafe_allow_html=True)

def load_cache(d: date):
    # prefer live pred file; else fallback
    path = f"data/pred_{d.isoformat()}.json"
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"schedule":{}, "runners":{}, "last_updated": datetime.now().strftime("%d %b %Y, %I:%M %p")}

if "splash_done" not in st.session_state:
    st.session_state.splash_done = False

with st.spinner("Loading predictions‚Ä¶"):
    time.sleep(0.6)
    st.session_state.splash_done = True

if not st.session_state.get("agreed", False):
    st.markdown('<div class="splash-wrap">', unsafe_allow_html=True)
    st.image("assets/logo.png", caption=None, use_column_width=False, output_format="PNG")
    st.markdown("""
    <div style="max-width:780px; text-align:center; line-height:1.5;">
    <h2>Disclaimer</h2>
    <p>Predictions are generated by an AI model and are for informational and entertainment purposes only.
    No guarantee of accuracy is provided. This is <b>not betting advice</b>. 18+. Gamble responsibly.</p>
    </div>
    """, unsafe_allow_html=True)
    if st.button("I Agree, Enter App"):
        st.session_state.agreed = True
        st.rerun()
    st.stop()

st.image("assets/logo.png", use_column_width=False)
st.title("Punters AId ‚Äî AU Greyhound Predictor")
st.caption("Winner, Top 4, win probability, predicted times & margins.")

today = date.today()
day_choice = st.sidebar.radio("Day", ["Today", "Tomorrow", "Custom"], index=0)
if day_choice=="Today": d = today
elif day_choice=="Tomorrow": d = today + timedelta(days=1)
else: d = st.sidebar.date_input("Pick date", value=today)

cache = load_cache(d)
schedule = cache.get("schedule", {})
runners_blob = cache.get("runners", {})
last_updated = cache.get("last_updated") or datetime.now().strftime("%d %b %Y, %I:%M %p")

tracks = sorted(list(schedule.keys()))
if not tracks:
    st.warning("No schedule available for this day.")
    st.stop()

track = st.sidebar.selectbox("Track", tracks, index=0)
races = schedule.get(track, [])
race_nos = [r["raceNo"] if isinstance(r, dict) else r for r in races]
race_no = st.sidebar.selectbox("Race", race_nos, index=0)

runners = runners_blob.get(track, {}).get(str(race_no), [])
if not runners:
    st.warning("No runners found for this race.")
    st.stop()

import pandas as pd
df = pd.DataFrame(runners)
df["pred_time"] = pd.to_numeric(df["pred_time"], errors="coerce").fillna(df["pred_time"].median())
df["pred_margin"] = pd.to_numeric(df["pred_margin"], errors="coerce").fillna(0.0)
df["win_prob"] = pd.to_numeric(df["win_prob"], errors="coerce").fillna(1.0/len(df))

st.markdown(f"**üìÖ Last Updated:** {last_updated}")

df_sorted = df.sort_values(["pred_time","win_prob"], ascending=[True,False]).reset_index(drop=True)
winner = df_sorted.iloc[0]

st.subheader("üèÜ Predicted Winner")
st.markdown(f"**{winner['name']}** (Box {int(winner['trap'])}) ‚Äî Win {winner['win_prob']:.0%} ‚Äî Time **{winner['pred_time']:.3f}s**")

top4 = df_sorted.iloc[:4][["trap","name","win_prob","pred_time","pred_margin"]].copy()
top4.index = range(1, len(top4)+1)
top4 = top4.rename(columns={"trap":"Box","name":"Dog","win_prob":"Win Prob","pred_time":"Pred Time (s)","pred_margin":"Margin (s)"})
st.subheader("Top 4")
st.dataframe(top4, use_container_width=True)

st.subheader("Full Field ‚Äî Win Probabilities")
st.bar_chart(df.set_index('name')["win_prob"])

csv = df_sorted.rename(columns={"trap":"Box","name":"Dog","win_prob":"Win Prob","pred_time":"Pred Time (s)","pred_margin":"Margin (s)"}).to_csv(index=False)
st.download_button("Download Race CSV", data=csv, file_name=f"{track.replace(' ','_')}_R{race_no}_{d.isoformat()}.csv", mime="text/csv")
